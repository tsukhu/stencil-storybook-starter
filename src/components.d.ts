/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { CryptoInterface, } from "./components/crypto-view/crypto.interface";
export namespace Components {
    interface CryptoRefresher {
    }
    interface CryptoTable {
        "cryptoCurrencies": string[];
        "cryptoData": CryptoInterface;
    }
    interface CryptoView {
        /**
          * Valid API key obtained from cryptocompare.com
         */
        "apikey": string;
        "refreshCryptoData": () => Promise<void>;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface SimpleConfig {
        /**
          * A simple number field
         */
        "aNumber": number;
        /**
          * Another number field
         */
        "bNumber": number;
        /**
          * A string field which represents a color
         */
        "bkColor": string;
        /**
          * A boolean field
         */
        "isChecked": boolean;
        /**
          * A poorly named field which should hold a color value
         */
        "poorlyNamedProp": string;
        /**
          * A simple text field
         */
        "simpleText": string;
        /**
          * A date field
         */
        "startDate": string;
    }
}
declare global {
    interface HTMLCryptoRefresherElement extends Components.CryptoRefresher, HTMLStencilElement {
    }
    var HTMLCryptoRefresherElement: {
        prototype: HTMLCryptoRefresherElement;
        new (): HTMLCryptoRefresherElement;
    };
    interface HTMLCryptoTableElement extends Components.CryptoTable, HTMLStencilElement {
    }
    var HTMLCryptoTableElement: {
        prototype: HTMLCryptoTableElement;
        new (): HTMLCryptoTableElement;
    };
    interface HTMLCryptoViewElement extends Components.CryptoView, HTMLStencilElement {
    }
    var HTMLCryptoViewElement: {
        prototype: HTMLCryptoViewElement;
        new (): HTMLCryptoViewElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLSimpleConfigElement extends Components.SimpleConfig, HTMLStencilElement {
    }
    var HTMLSimpleConfigElement: {
        prototype: HTMLSimpleConfigElement;
        new (): HTMLSimpleConfigElement;
    };
    interface HTMLElementTagNameMap {
        "crypto-refresher": HTMLCryptoRefresherElement;
        "crypto-table": HTMLCryptoTableElement;
        "crypto-view": HTMLCryptoViewElement;
        "my-component": HTMLMyComponentElement;
        "simple-config": HTMLSimpleConfigElement;
    }
}
declare namespace LocalJSX {
    interface CryptoRefresher {
        "onRefreshCryptoData"?: (event: CustomEvent<any>) => void;
    }
    interface CryptoTable {
        "cryptoCurrencies"?: string[];
        "cryptoData"?: CryptoInterface;
    }
    interface CryptoView {
        /**
          * Valid API key obtained from cryptocompare.com
         */
        "apikey"?: string;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface SimpleConfig {
        /**
          * A simple number field
         */
        "aNumber"?: number;
        /**
          * Another number field
         */
        "bNumber"?: number;
        /**
          * A string field which represents a color
         */
        "bkColor"?: string;
        /**
          * A boolean field
         */
        "isChecked"?: boolean;
        /**
          * A poorly named field which should hold a color value
         */
        "poorlyNamedProp"?: string;
        /**
          * A simple text field
         */
        "simpleText"?: string;
        /**
          * A date field
         */
        "startDate"?: string;
    }
    interface IntrinsicElements {
        "crypto-refresher": CryptoRefresher;
        "crypto-table": CryptoTable;
        "crypto-view": CryptoView;
        "my-component": MyComponent;
        "simple-config": SimpleConfig;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "crypto-refresher": LocalJSX.CryptoRefresher & JSXBase.HTMLAttributes<HTMLCryptoRefresherElement>;
            "crypto-table": LocalJSX.CryptoTable & JSXBase.HTMLAttributes<HTMLCryptoTableElement>;
            "crypto-view": LocalJSX.CryptoView & JSXBase.HTMLAttributes<HTMLCryptoViewElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "simple-config": LocalJSX.SimpleConfig & JSXBase.HTMLAttributes<HTMLSimpleConfigElement>;
        }
    }
}
